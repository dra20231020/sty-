"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseToText = void 0;
var _Text = _interopRequireDefault(require("../models/Layer/Text"));
var _text = require("../utils/text");
var _group = require("./group");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Â∞Ü Node ËΩ¨‰∏∫ Text ÂØπË±°
 * */
const parseToText = node => {
  const group = (0, _group.parseToGroup)(node);

  // Ê∑ªÂä†ÊñáÊú¨
  const styles = getComputedStyle(node);
  const textStyle = _Text.default.getTextStyleFromNode(node);
  // Â§ÑÁêÜÂÜÖÈÉ®TextËäÇÁÇπ
  const textNode = Array.from(node.childNodes).filter(child =>
  // ÊèêÂèñÊâÄÊúâ text ÂÖÉÁ¥† ‰∏î text ÈáåÊúâ‰∏úË•ø
  child.nodeType === Node.TEXT_NODE && child.nodeValue.trim().length > 0).map(childNode => {
    // üí© ËøôÈáåÁöÑ‰ª£Á†ÅÂÜôÁöÑÊúâÁÇπÂ±é
    // ‰∏ªË¶ÅÈóÆÈ¢òÂú®‰∫é text Âú®‰∏çÂêå display Ê®°Âºè‰∏ãÁöÑ‰ΩçÁΩÆÈóÆÈ¢ò
    // ÂΩ±ÂìçÂõ†Á¥†:
    // 1. Ëá™Ë∫´ÁöÑ display Âíå text-align
    // 2. Áà∂Á∫ßÁöÑ display Âíå Â∏ÉÂ±ÄÂèÇÊï∞
    // ‰∏äËø∞ 4 ‰∏™Ë¶ÅÁ¥†ÁªºÂêàÂΩ±ÂìçÊñáÊú¨ÁöÑ x y ÂùêÊ†á
    // ÊúâÂæÖÈáçÊûÑ

    const {
      lines,
      rangeBCR
    } = (0, _text.getTextLinesAndRange)(childNode);
    const absBCR = (0, _text.getTextAbsBCR)(node, childNode);
    let textWidth = absBCR.width;

    // ‰øÆÊ≠£ inline Ê®°Âºè‰∏ãÁöÑË°åÈ´ò
    if (styles.display === 'inline') {
      textStyle.lineHeight = rangeBCR.height / lines;
    }
    // **** Â§ÑÁêÜÊñáÊú¨Â∏¶ÁúÅÁï•ÁöÑÊÉÖÂÜµ ****** //

    let textValue = _Text.default.fixWhiteSpace(childNode.nodeValue, styles.whiteSpace);
    const originText = textValue;
    // ÈíàÂØπÈöêËóèÊàñËÄÖÂ∏¶ÁúÅÁï•Âè∑ÁöÑ
    if (styles.overflow === 'hidden') {
      // ‰øÆÊîπÂÆΩÂ∫¶
      textWidth = parseFloat(styles.width);
      // Âπ∂ÂØπÊØî‰øÆÊîπÂêéÁöÑÊñáÊú¨ÂÜÖÂÆπ
      textValue = (0, _text.getLineTextWithWidth)(childNode, textWidth);

      // Â¶ÇÊûúÊòØ ellipsis Á±ªÂûã‰∏îÂ≠òÂú®ÁúÅÁï•Âè∑
      // ÊåâÁúÅÁï•Âè∑Ê∑ªÂä†
      if (styles.textOverflow === 'ellipsis' && originText.length !== textValue.length) {
        textValue = textValue.slice(0, textValue.length - 2);
        textValue += '...';
      }
    }
    const text = new _Text.default({
      x: absBCR.x,
      y: absBCR.y,
      width: textWidth,
      height: absBCR.height,
      text: textValue,
      style: textStyle,
      multiline: lines > 1
    });

    // Â§ÑÁêÜÂ±Ö‰∏≠ÁöÑÊ†∑Âºè
    if (styles.verticalAlign === 'middle') {
      text.centerY = group.centerY;
    }

    // TODO ÊääÊñπÊ≥ïÊäΩË±°Âá∫Êù•Êàê‰∏∫‰∏Ä‰∏™ÈÄöÁî®ÊñπÊ≥ï
    // Â§ÑÁêÜ flex Â∏ÉÂ±ÄÁöÑÊ†∑Âºè
    if (styles.display.includes('flex')) {
      const {
        flexDirection,
        alignItems,
        justifyContent
      } = styles;
      switch (flexDirection) {
        case 'row':
        default:
          switch (alignItems) {
            case 'flex-start':
              text.top = group.top;
              break;
            case 'center':
              text.centerY = group.centerY;
              break;
            case 'flex-end':
              text.bottom = group.bottom;
              break;
            default:
          }
          switch (justifyContent) {
            case 'flex-start':
              text.left = group.left;
              break;
            case 'center':
              text.centerX = group.centerX;
              break;
            case 'flex-end':
              text.right = group.right;
              break;
            default:
          }
          break;
        case 'column':
          switch (alignItems) {
            case 'flex-start':
              text.left = group.left;
              break;
            case 'center':
              text.centerX = group.centerX;
              break;
            case 'flex-end':
              text.right = group.right;
              break;
            default:
          }
          switch (justifyContent) {
            case 'flex-start':
              text.top = group.top;
              break;
            case 'center':
              text.centerY = group.centerY;
              break;
            case 'flex-end':
              text.bottom = group.bottom;
              break;
            default:
          }
      }
    }
    text.mapBasicInfo(node);
    return text;
  });
  if (textNode.length === 0) {
    return;
  }
  if (textNode.length === 1) {
    return textNode[0];
  }
  return textNode;
};
exports.parseToText = parseToText;